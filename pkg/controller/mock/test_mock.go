// Code generated by MockGen. DO NOT EDIT.
// Source: test.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockITestController is a mock of ITestController interface
type MockITestController struct {
	ctrl     *gomock.Controller
	recorder *MockITestControllerMockRecorder
}

// MockITestControllerMockRecorder is the mock recorder for MockITestController
type MockITestControllerMockRecorder struct {
	mock *MockITestController
}

// NewMockITestController creates a new mock instance
func NewMockITestController(ctrl *gomock.Controller) *MockITestController {
	mock := &MockITestController{ctrl: ctrl}
	mock.recorder = &MockITestControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITestController) EXPECT() *MockITestControllerMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockITestController) Ping(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ping", ctx)
}

// Ping indicates an expected call of Ping
func (mr *MockITestControllerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockITestController)(nil).Ping), ctx)
}

// SaveUser mocks base method
func (m *MockITestController) SaveUser(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveUser", ctx)
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockITestControllerMockRecorder) SaveUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockITestController)(nil).SaveUser), ctx)
}

// QueryUserByName mocks base method
func (m *MockITestController) QueryUserByName(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryUserByName", ctx)
}

// QueryUserByName indicates an expected call of QueryUserByName
func (mr *MockITestControllerMockRecorder) QueryUserByName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserByName", reflect.TypeOf((*MockITestController)(nil).QueryUserByName), ctx)
}

// UpdateUserByName mocks base method
func (m *MockITestController) UpdateUserByName(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserByName", ctx)
}

// UpdateUserByName indicates an expected call of UpdateUserByName
func (mr *MockITestControllerMockRecorder) UpdateUserByName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByName", reflect.TypeOf((*MockITestController)(nil).UpdateUserByName), ctx)
}

// RemoveUserByName mocks base method
func (m *MockITestController) RemoveUserByName(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveUserByName", ctx)
}

// RemoveUserByName indicates an expected call of RemoveUserByName
func (mr *MockITestControllerMockRecorder) RemoveUserByName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserByName", reflect.TypeOf((*MockITestController)(nil).RemoveUserByName), ctx)
}
