// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/zhulinwei/go-dc/pkg/model"
	mongo "go.mongodb.org/mongo-driver/mongo"
	reflect "reflect"
)

// MockIUserDao is a mock of IUserDao interface
type MockIUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDaoMockRecorder
}

// MockIUserDaoMockRecorder is the mock recorder for MockIUserDao
type MockIUserDaoMockRecorder struct {
	mock *MockIUserDao
}

// NewMockIUserDao creates a new mock instance
func NewMockIUserDao(ctrl *gomock.Controller) *MockIUserDao {
	mock := &MockIUserDao{ctrl: ctrl}
	mock.recorder = &MockIUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserDao) EXPECT() *MockIUserDaoMockRecorder {
	return m.recorder
}

// QueryUserByName mocks base method
func (m *MockIUserDao) QueryUserByName(name string) model.UserDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserByName", name)
	ret0, _ := ret[0].(model.UserDB)
	return ret0
}

// QueryUserByName indicates an expected call of QueryUserByName
func (mr *MockIUserDaoMockRecorder) QueryUserByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserByName", reflect.TypeOf((*MockIUserDao)(nil).QueryUserByName), name)
}

// SaveUser mocks base method
func (m *MockIUserDao) SaveUser(test1 model.UserReq) *mongo.InsertOneResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", test1)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	return ret0
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockIUserDaoMockRecorder) SaveUser(test1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockIUserDao)(nil).SaveUser), test1)
}

// RemoveUserByName mocks base method
func (m *MockIUserDao) RemoveUserByName(name string) *mongo.DeleteResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserByName", name)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	return ret0
}

// RemoveUserByName indicates an expected call of RemoveUserByName
func (mr *MockIUserDaoMockRecorder) RemoveUserByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserByName", reflect.TypeOf((*MockIUserDao)(nil).RemoveUserByName), name)
}

// UpdateUserByName mocks base method
func (m *MockIUserDao) UpdateUserByName(oldName, newName string) *mongo.UpdateResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByName", oldName, newName)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	return ret0
}

// UpdateUserByName indicates an expected call of UpdateUserByName
func (mr *MockIUserDaoMockRecorder) UpdateUserByName(oldName, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByName", reflect.TypeOf((*MockIUserDao)(nil).UpdateUserByName), oldName, newName)
}
