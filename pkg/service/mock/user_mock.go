// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/zhulinwei/go-dc/pkg/model"
	reflect "reflect"
)

// MockIUserService is a mock of IUserService interface
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// SaveUser mocks base method
func (m *MockIUserService) SaveUser(user model.UserRequest) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", user)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockIUserServiceMockRecorder) SaveUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockIUserService)(nil).SaveUser), user)
}

// BulkSaveUser mocks base method
func (m *MockIUserService) BulkSaveUser(users []model.UserRequest) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSaveUser", users)
	ret0, _ := ret[0].(int64)
	return ret0
}

// BulkSaveUser indicates an expected call of BulkSaveUser
func (mr *MockIUserServiceMockRecorder) BulkSaveUser(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSaveUser", reflect.TypeOf((*MockIUserService)(nil).BulkSaveUser), users)
}

// QueryUserByName mocks base method
func (m *MockIUserService) QueryUserByName(name string) (*model.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserByName", name)
	ret0, _ := ret[0].(*model.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserByName indicates an expected call of QueryUserByName
func (mr *MockIUserServiceMockRecorder) QueryUserByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserByName", reflect.TypeOf((*MockIUserService)(nil).QueryUserByName), name)
}

// QueryUsersByName mocks base method
func (m *MockIUserService) QueryUsersByName(name string) ([]model.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUsersByName", name)
	ret0, _ := ret[0].([]model.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUsersByName indicates an expected call of QueryUsersByName
func (mr *MockIUserServiceMockRecorder) QueryUsersByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUsersByName", reflect.TypeOf((*MockIUserService)(nil).QueryUsersByName), name)
}

// RemoveUserByName mocks base method
func (m *MockIUserService) RemoveUserByName(name string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserByName", name)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// RemoveUserByName indicates an expected call of RemoveUserByName
func (mr *MockIUserServiceMockRecorder) RemoveUserByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserByName", reflect.TypeOf((*MockIUserService)(nil).RemoveUserByName), name)
}

// UpdateUserByName mocks base method
func (m *MockIUserService) UpdateUserByName(oldName, newName string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByName", oldName, newName)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// UpdateUserByName indicates an expected call of UpdateUserByName
func (mr *MockIUserServiceMockRecorder) UpdateUserByName(oldName, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByName", reflect.TypeOf((*MockIUserService)(nil).UpdateUserByName), oldName, newName)
}
