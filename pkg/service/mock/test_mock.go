// Code generated by MockGen. DO NOT EDIT.
// Source: test.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	dto "github.com/zhulinwei/gin-demo/pkg/dto"
	model "github.com/zhulinwei/gin-demo/pkg/model"
	reflect "reflect"
)

// MockITestService is a mock of ITestService interface
type MockITestService struct {
	ctrl     *gomock.Controller
	recorder *MockITestServiceMockRecorder
}

// MockITestServiceMockRecorder is the mock recorder for MockITestService
type MockITestServiceMockRecorder struct {
	mock *MockITestService
}

// NewMockITestService creates a new mock instance
func NewMockITestService(ctrl *gomock.Controller) *MockITestService {
	mock := &MockITestService{ctrl: ctrl}
	mock.recorder = &MockITestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITestService) EXPECT() *MockITestServiceMockRecorder {
	return m.recorder
}

// SaveUser mocks base method
func (m *MockITestService) SaveUser(test1 dto.Test) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", test1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockITestServiceMockRecorder) SaveUser(test1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockITestService)(nil).SaveUser), test1)
}

// QueryUserByName mocks base method
func (m *MockITestService) QueryUserByName(name string) model.Test {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserByName", name)
	ret0, _ := ret[0].(model.Test)
	return ret0
}

// QueryUserByName indicates an expected call of QueryUserByName
func (mr *MockITestServiceMockRecorder) QueryUserByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserByName", reflect.TypeOf((*MockITestService)(nil).QueryUserByName), name)
}

// RemoveUserByName mocks base method
func (m *MockITestService) RemoveUserByName(name string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserByName", name)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// RemoveUserByName indicates an expected call of RemoveUserByName
func (mr *MockITestServiceMockRecorder) RemoveUserByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserByName", reflect.TypeOf((*MockITestService)(nil).RemoveUserByName), name)
}

// UpdateUserByName mocks base method
func (m *MockITestService) UpdateUserByName(oldName, newName string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByName", oldName, newName)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// UpdateUserByName indicates an expected call of UpdateUserByName
func (mr *MockITestServiceMockRecorder) UpdateUserByName(oldName, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByName", reflect.TypeOf((*MockITestService)(nil).UpdateUserByName), oldName, newName)
}
